# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # Список правил, которые будут отключены. Эти правила включены по умолчанию, но вы можете их отключить.
  - colon #Проверяет правильность использования двоеточий.
  - comma #Проверяет правильность использования запятых.
  - control_statement #Проверяет стиль написания управляющих конструкций (например, if, for).

opt_in_rules: # Список правил, которые по умолчанию отключены, но вы можете их включить.
  - empty_count # Проверяет, что для проверки на пустоту коллекций используется .isEmpty, а не .count == 0.

# Alternatively, specify all rules explicitly by uncommenting this option:
# only_rules: # Если вы хотите использовать только определенные правила, укажите их здесь. При использовании этой опции disabled_rules и opt_in_rules игнорируются.
#   - empty_parameters #Проверяет, что в функциях нет пустых параметров.
#   - vertical_whitespace #Проверяет, что в коде нет лишних пустых строк.

analyzer_rules: # Правила, которые применяются только при использовании команды swiftlint analyze.
  - explicit_self # Требует явного использования self в замыканиях.

# Case-sensitive paths to include during linting. Directory paths supplied on the
# command line will be ignored.
included: # Список папок, которые будут проверяться SwiftLint.
  - AddNews
  - Sources # SwiftLint будет проверять только файлы в папке
excluded: # Список папок или файлов, которые будут игнорироваться SwiftLint. Имеет приоритет над included.
  - Carthage # SwiftLint не будет проверять файлы в папках Pods, Carthage,
  - Pods

# Если true, SwiftLint не будет завершаться с ошибкой, если не найдено ни одного файла для проверки.
allow_zero_lintable_files: false

# Если true, все предупреждения будут рассматриваться как ошибки.
strict: false

# Если true, все ошибки будут рассматриваться как предупреждения.
lenient: false

# Путь к файлу, который содержит список нарушений, которые будут игнорироваться.
baseline: Baseline.json

# Путь к файлу, в который будут сохранены текущие нарушения для использования в качестве базовой линии.
write_baseline: Baseline.json

# Если true, SwiftLint будет проверять наличие обновлений после выполнения проверки.
check_for_updates: true

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # Уровень серьезности для принудительного приведения типов (as!).
force_try:
  severity: warning # Уровень серьезности для принудительного вызова try!.
# rules that have both warning and error levels, can set just the warning level
# Максимальная длина строки.
line_length: 200
# Максимальная длина тела типа (например, класса или структуры).
type_body_length:
  - 300 # warning
  - 400 # error
# Максимальная длина файла.
file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 3 # Имена типов должны быть не короче 3 символов.
  max_length: # Если имя длиннее
    warning: 40
    error: 50
  excluded: iPhone # Имя iPhone будет игнорироваться.
  allowed_symbols: ["_"] # В именах разрешено использовать символ _.
#Правила для имен переменных и функций.
identifier_name:
  min_length: # only min_length
    error: 3 # Имена должны быть не короче 3 символов.
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey
    #Имена id, URL и GlobalAPIKey будут игнорироваться.
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)

